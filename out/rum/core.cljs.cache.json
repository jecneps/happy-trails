["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "],"~$Object",["^ ","~$current",["^ "],"~$renderToString",["^ "],"~$renderToStaticMarkup",["^ "]],"~$ReactDOM",["^ ","~$unstable_batchedUpdates",["^ "],"~$render",["^ "],"~$unmountComponentAtNode",["^ "],"~$hydrate",["^ "],"~$createPortal",["^ "],"~$findDOMNode",["^ "]],"~$ReactNative",["^ ","^9",["^ "]],"~$require",["^ "],"~$window",["^ ","~$requestAnimationFrame",["^ "],"~$webkitRequestAnimationFrame",["^ "],"~$mozRequestAnimationFrame",["^ "],"~$msRequestAnimationFrame",["^ "]],"~$setTimeout",["^ "],"~$undefined",["^ "],"~$React",["^ ","~$useState",["^ "],"~$memo",["^ "],"~$createRef",["^ "],"~$useReducer",["^ "],"~$useCallback",["^ "],"~$useRef",["^ "],"~$cloneElement",["^ "],"~$Component",["^ ","~$call",["^ "]],"~$useMemo",["^ "],"~$useEffect",["^ "],"~$createElement",["^ ","~$apply",["^ "]],"~$createContext",["^ "]],"~$ReactDOMServer",["^ ","^6",["^ "],"^7",["^ "]]],"~:use-macros",["^ ","~$call-all","~$rum.util","~$collect","^Z","~$collect*","^Z"],"~:excludes",["~#set",["~$ref","~$deref"]],"~:name","~$rum.core","~:imports",null,"~:requires",["^ ","~$goog.functions","^19","~$rum.cursor","^1:","~$fns","^19","~$gobj","~$goog.object","^1=","^1=","~$cljsjs.react","^1>","~$rum.derived-atom","^1?","~$sablono.core","^1@","~$cljsjs.react.dom","^1A","~$util","^Z","^Z","^Z","~$cursor","^1:","~$derived-atom","^1?"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^Y","^Z","^[","^Z","^10","^Z"],"~:defs",["^ ","~$adapt-class-helper",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","~:line",627,"~:column",7,"~:end-line",627,"~:end-column",25,"~:arglists",["~#list",["~$quote",["^1Q",[["~$type","~$attrs","~$children"]]]]]],"^15","~$rum.core/adapt-class-helper","~:variadic",false,"^1K","out/rum/core.cljs","^1O",25,"~:method-params",["^1Q",[["^1S","^1T","^1U"]]],"~:protocol-impl",null,"~:arglists-meta",["^1Q",[null,null]],"^1M",1,"^1L",627,"^1N",627,"~:max-fixed-arity",3,"~:fn-var",true,"^1P",["^1Q",["^1R",["^1Q",[["^1S","^1T","^1U"]]]]]],"~$use-ref",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",581,"^1M",7,"^1N",581,"^1O",14,"^1P",["^1Q",["^1R",["^1Q",[["~$initial-value"]]]]],"~:doc","Takes a value and puts it into a mutable container which is persisted for the full lifetime of the component.\n  https://reactjs.org/docs/hooks-reference.html#useref"],"^15","~$rum.core/use-ref","^1W",false,"^1K","out/rum/core.cljs","^1O",14,"^1X",["^1Q",[["^22"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",581,"^1N",581,"^1[",1,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^22"]]]]],"^23","Takes a value and puts it into a mutable container which is persisted for the full lifetime of the component.\n  https://reactjs.org/docs/hooks-reference.html#useref"],"~$mount",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",242,"^1M",7,"^1N",242,"^1O",12,"^1P",["^1Q",["^1R",["^1Q",[["~$element","~$node"]]]]],"^23","Add element to the DOM tree. Idempotent. Subsequent mounts will just update element."],"^15","~$rum.core/mount","^1W",false,"^1K","out/rum/core.cljs","^1O",12,"^1X",["^1Q",[["^26","^27"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",242,"^1N",242,"^1[",2,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^26","^27"]]]]],"^23","Add element to the DOM tree. Idempotent. Subsequent mounts will just update element."],"~$react-memo",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",169,"^1M",7,"^1N",169,"^1O",17,"^1P",["^1Q",["^1R",["^1Q",[["~$f"]]]]]],"^15","~$rum.core/react-memo","^1W",false,"^1K","out/rum/core.cljs","^1O",17,"^1X",["^1Q",[["~$f"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",169,"^1N",169,"^1[",1,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["~$f"]]]]]],"~$unmount",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",248,"^1M",7,"^1N",248,"^1O",14,"^1P",["^1Q",["^1R",["^1Q",[["^27"]]]]],"^23","Removes component from the DOM tree."],"^15","~$rum.core/unmount","^1W",false,"^1K","out/rum/core.cljs","^1O",14,"^1X",["^1Q",[["^27"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",248,"^1N",248,"^1[",1,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^27"]]]]],"^23","Removes component from the DOM tree."],"~$local",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",342,"^1M",7,"^1N",342,"^1O",12,"^1P",["^1Q",["^1R",["^1Q",[["~$initial"],["^2>","~$key"]]]]],"^23","Mixin constructor. Adds an atom to component’s state that can be used to keep stuff during component’s lifecycle. Component will be re-rendered if atom’s value changes. Atom is stored under user-provided key or under `:rum/local` by default.\n  \n   ```\n   (rum/defcs counter < (rum/local 0 :cnt)\n     [state label]\n     (let [*cnt (:cnt state)]\n       [:div {:on-click (fn [_] (swap! *cnt inc))}\n         label @*cnt]))\n   \n   (rum/mount (counter \"Click count: \"))\n   ```","~:top-fn",["^ ","^1W",false,"^1[",2,"^1X",["^1Q",[["^2>"],["^2>","^2?"]]],"^1P",["^1Q",[["^2>"],["^2>","^2?"]]],"^1Z",["^1Q",[null,null]]]],"^15","~$rum.core/local","^1W",false,"^1K","out/rum/core.cljs","^1O",12,"^2@",["^ ","^1W",false,"^1[",2,"^1X",["^1Q",[["^2>"],["^2>","^2?"]]],"^1P",["^1Q",[["^2>"],["^2>","^2?"]]],"^1Z",["^1Q",[null,null]]],"^1X",["^1Q",[["^2>"],["^2>","^2?"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",342,"^1N",342,"^1[",2,"^20",true,"^1P",["^1Q",[["^2>"],["^2>","^2?"]]],"^23","Mixin constructor. Adds an atom to component’s state that can be used to keep stuff during component’s lifecycle. Component will be re-rendered if atom’s value changes. Atom is stored under user-provided key or under `:rum/local` by default.\n  \n   ```\n   (rum/defcs counter < (rum/local 0 :cnt)\n     [state label]\n     (let [*cnt (:cnt state)]\n       [:div {:on-click (fn [_] (swap! *cnt inc))}\n         label @*cnt]))\n   \n   (rum/mount (counter \"Click count: \"))\n   ```"],"~$create-context",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",263,"^1M",7,"^1N",263,"^1O",21,"^1P",["^1Q",["^1R",["^1Q",[["~$default-value"]]]]]],"^15","~$rum.core/create-context","^1W",false,"^1K","out/rum/core.cljs","^1O",21,"^1X",["^1Q",[["^2C"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",263,"^1N",263,"^1[",1,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^2C"]]]]]],"~$use-reducer",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",513,"^1M",14,"^1N",513,"^1O",25,"~:tag","~$array","^1P",["^1Q",["^1R",["^1Q",[["~$reducer-fn","^22"]]]]],"^23","Takes reducing function and initial state value.\n  Returns a tuple of [value dispatch!], where `value` is current state value and `dispatch` is a function that schedules re-render.\n\n  (defmulti value-reducer (fn [event value] event))\n\n  (defmethod value-reducer :inc [_ value]\n    (inc value))\n\n  (let [[value dispatch!] (rum/use-reducer value-reducer 0)]\n    [:button {:on-click #(dispatch! :inc)}\n      value])\n\n  Read more at https://reactjs.org/docs/hooks-reference.html#usereducer"],"^15","~$rum.core/use-reducer","^1W",false,"^1K","out/rum/core.cljs","^1O",25,"^1X",["^1Q",[["^2H","^22"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",513,"~:ret-tag","^2G","^1N",513,"^1[",2,"^2F","^2G","^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^2H","^22"]]]]],"^23","Takes reducing function and initial state value.\n  Returns a tuple of [value dispatch!], where `value` is current state value and `dispatch` is a function that schedules re-render.\n\n  (defmulti value-reducer (fn [event value] event))\n\n  (defmethod value-reducer :inc [_ value]\n    (inc value))\n\n  (let [[value dispatch!] (rum/use-reducer value-reducer 0)]\n    [:button {:on-click #(dispatch! :inc)}\n      value])\n\n  Read more at https://reactjs.org/docs/hooks-reference.html#usereducer"],"~$memo-compare-props",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",165,"^1M",8,"^1N",165,"^1O",26,"~:private",true,"^1P",["^1Q",["^1R",["^1Q",[["~$prev-props","~$next-props"]]]]]],"^2L",true,"^15","~$rum.core/memo-compare-props","^1W",false,"^1K","out/rum/core.cljs","^1O",26,"^1X",["^1Q",[["^2M","^2N"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",165,"^1N",165,"^1[",2,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^2M","^2N"]]]]]],"~$use-memo",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",572,"^1M",7,"^1N",572,"^1O",15,"^1P",["^1Q",["^1R",["^1Q",[["~$f"],["~$f","~$deps"]]]]],"^23","Takes a function, memoizes it based on provided deps collection and executes immediately returning a result.\n  Read more at https://reactjs.org/docs/hooks-reference.html#usememo","^2@",["^ ","^1W",false,"^1[",2,"^1X",["^1Q",[["~$f"],["~$f","^2Q"]]],"^1P",["^1Q",[["~$f"],["~$f","^2Q"]]],"^1Z",["^1Q",[null,null]]]],"^15","~$rum.core/use-memo","^1W",false,"^1K","out/rum/core.cljs","^1O",15,"^2@",["^ ","^1W",false,"^1[",2,"^1X",["^1Q",[["~$f"],["~$f","^2Q"]]],"^1P",["^1Q",[["~$f"],["~$f","^2Q"]]],"^1Z",["^1Q",[null,null]]],"^1X",["^1Q",[["~$f"],["~$f","^2Q"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",572,"^1N",572,"^1[",2,"^20",true,"^1P",["^1Q",[["~$f"],["~$f","^2Q"]]],"^23","Takes a function, memoizes it based on provided deps collection and executes immediately returning a result.\n  Read more at https://reactjs.org/docs/hooks-reference.html#usememo"],"~$reactive",["^ ","^15","~$rum.core/reactive","^1K","out/rum/core.cljs","^1L",371,"^1M",1,"^1N",371,"^1O",14,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",371,"^1M",6,"^1N",371,"^1O",14],"^23","Mixin. Works in conjunction with [[react]].\n  \n   ```\n   (rum/defc comp < rum/reactive\n     [*counter]\n     [:div (rum/react counter)])\n\n   (def *counter (atom 0))\n   (rum/mount (comp *counter) js/document.body)\n   (swap! *counter inc) ;; will force comp to re-render\n   ```","^2F","~$cljs.core/IMap"],"~$render-all",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",225,"^1M",8,"^1N",225,"^1O",18,"^2L",true,"^1P",["^1Q",["^1R",["^1Q",[["~$queue"]]]]]],"^2L",true,"^15","~$rum.core/render-all","^1W",false,"^1K","out/rum/core.cljs","^1O",18,"^1X",["^1Q",[["^2W"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",225,"^1N",225,"^1[",1,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^2W"]]]]]],"~$set-meta!",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",134,"^1M",8,"^1N",134,"^1O",17,"^2L",true,"^1P",["^1Q",["^1R",["^1Q",[["~$c"]]]]]],"^2L",true,"^15","~$rum.core/set-meta!","^1W",false,"^1K","out/rum/core.cljs","^1O",17,"^1X",["^1Q",[["~$c"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",134,"^1N",134,"^1[",1,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["~$c"]]]]]],"~$ref-node",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",308,"^1M",7,"^1N",308,"^1O",15,"^1P",["^1Q",["^1R",["^1Q",[["~$state","^2?"]]]]],"^23","DEPRECATED: Use :ref (fn [dom-or-nil]) callback instead. See rum issue #124\n  Given state and ref handle, returns DOM node associated with ref."],"^15","~$rum.core/ref-node","^1W",false,"^1K","out/rum/core.cljs","^1O",15,"^1X",["^1Q",[["^30","^2?"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",308,"^1N",308,"^1[",2,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^30","^2?"]]]]],"^23","DEPRECATED: Use :ref (fn [dom-or-nil]) callback instead. See rum issue #124\n  Given state and ref handle, returns DOM node associated with ref."],"~$create-ref",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",589,"^1M",7,"^1N",589,"^1O",17,"^1P",["^1Q",["^1R",["^1Q",[[]]]]]],"^15","~$rum.core/create-ref","^1W",false,"^1K","out/rum/core.cljs","^1O",17,"^1X",["^1Q",[[]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",589,"^1N",589,"^1[",0,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[[]]]]]],"~$react",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",411,"^1M",7,"^1N",411,"^1O",12,"^1P",["^1Q",["^1R",["^1Q",[["^13"]]]]],"^23","Works in conjunction with [[reactive]] mixin. Use this function instead of `deref` inside render, and your component will subscribe to changes happening to the derefed atom."],"^15","~$rum.core/react","^1W",false,"^1K","out/rum/core.cljs","^1O",12,"^1X",["^1Q",[["^13"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",411,"^1N",411,"^1[",1,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^13"]]]]],"^23","Works in conjunction with [[reactive]] mixin. Use this function instead of `deref` inside render, and your component will subscribe to changes happening to the derefed atom."],"~$render-static-markup",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",617,"^1M",7,"^1N",617,"^1O",27,"^1P",["^1Q",["^1R",["^1Q",[["~$src"]]]]],"^23","Same as [[render-html]] but returned string has nothing React-specific.\n  This allows Rum to be used as traditional server-side templating engine."],"^15","~$rum.core/render-static-markup","^1W",false,"^1K","out/rum/core.cljs","^1O",27,"^1X",["^1Q",[["^37"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",617,"^1N",617,"^1[",1,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^37"]]]]],"^23","Same as [[render-html]] but returned string has nothing React-specific.\n  This allows Rum to be used as traditional server-side templating engine."],"~$schedule",["^ ","^15","~$rum.core/schedule","^1K","out/rum/core.cljs","^1L",209,"^1M",1,"^1N",209,"^1O",24,"^2L",true,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",209,"^1M",16,"^1N",209,"^1O",24,"^2L",true],"^2F",["^12",["~$boolean","~$js","~$function"]]],"~$lazy-build",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",140,"^1M",7,"^1N",140,"^1O",17,"^1P",["^1Q",["^1R",["^1Q",[["~$ctor","^:","~$mixins","~$display-name"]]]]],"^23","Wraps component construction in a way so that Google Closure Compiler\n   can properly recognize and elide unused components. The extra `set-meta`\n   fn is needed so that the compiler can properly detect that all functions\n   are side effect free."],"^15","~$rum.core/lazy-build","^1W",false,"^1K","out/rum/core.cljs","^1O",17,"^1X",["^1Q",[["^3?","^:","^3@","^3A"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",140,"^1N",140,"^1[",4,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^3?","^:","^3@","^3A"]]]]],"^23","Wraps component construction in a way so that Google Closure Compiler\n   can properly recognize and elide unused components. The extra `set-meta`\n   fn is needed so that the compiler can properly detect that all functions\n   are side effect free."],"~$request-render",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",235,"^1M",7,"^1N",235,"^1O",21,"^1P",["^1Q",["^1R",["^1Q",[["~$component"]]]]],"^23","Schedules react component to be rendered on next animation frame."],"^15","~$rum.core/request-render","^1W",false,"^1K","out/rum/core.cljs","^1O",21,"^1X",["^1Q",[["^3D"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",235,"^1N",235,"^1[",1,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^3D"]]]]],"^23","Schedules react component to be rendered on next animation frame."],"~$render-queue",["^ ","^15","~$rum.core/render-queue","^1K","out/rum/core.cljs","^1L",223,"^1M",1,"^1N",223,"^1O",28,"^2L",true,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",223,"^1M",16,"^1N",223,"^1O",28,"^2L",true],"^2F","~$any"],"~$portal",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",258,"^1M",7,"^1N",258,"^1O",13,"^1P",["^1Q",["^1R",["^1Q",[["^26","^27"]]]]],"^23","Render `element` in a DOM `node` that is ouside of current DOM hierarchy."],"^15","~$rum.core/portal","^1W",false,"^1K","out/rum/core.cljs","^1O",13,"^1X",["^1Q",[["^26","^27"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",258,"^1N",258,"^1[",2,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^26","^27"]]]]],"^23","Render `element` in a DOM `node` that is ouside of current DOM hierarchy."],"~$with-key",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",270,"^1M",7,"^1N",270,"^1O",15,"^1P",["^1Q",["^1R",["^1Q",[["^26","^2?"]]]]],"^23","Adds React key to element.\n   \n   ```\n   (rum/defc label [text] [:div text])\n\n   (-> (label)\n       (rum/with-key \"abc\")\n       (rum/mount js/document.body))\n   ```"],"^15","~$rum.core/with-key","^1W",false,"^1K","out/rum/core.cljs","^1O",15,"^1X",["^1Q",[["^26","^2?"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",270,"^1N",270,"^1[",2,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^26","^2?"]]]]],"^23","Adds React key to element.\n   \n   ```\n   (rum/defc label [text] [:div text])\n\n   (-> (label)\n       (rum/with-key \"abc\")\n       (rum/mount js/document.body))\n   ```"],"~$extend!",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",19,"^1M",8,"^1N",19,"^1O",15,"^2L",true,"^1P",["^1Q",["^1R",["^1Q",[["~$obj","~$props"]]]]]],"^2L",true,"^15","~$rum.core/extend!","^1W",false,"^1K","out/rum/core.cljs","^1O",15,"^1X",["^1Q",[["^3N","^3O"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",19,"^1N",19,"^1[",2,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^3N","^3O"]]]]]],"~$build-defcs",["^ ","~:no-doc",true,"^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",197,"^1M",16,"^1N",197,"^1O",27,"^3R",true,"^1P",["^1Q",["^1R",["^1Q",[["~$render-body","^3@","^3A"]]]]]],"^15","~$rum.core/build-defcs","^1W",false,"^1K","out/rum/core.cljs","^1O",27,"^1X",["^1Q",[["^3S","^3@","^3A"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",197,"^1N",197,"^1[",3,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^3S","^3@","^3A"]]]]]],"~$*reactions*",["^ ","^15","~$rum.core/*reactions*","^1K","out/rum/core.cljs","^1L",369,"^1M",1,"^1N",369,"^1O",37,"~:dynamic",true,"^2L",true,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",369,"^1M",26,"^1N",369,"^1O",37,"^3W",true,"^2L",true]],"^13",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",302,"^1M",7,"^1N",302,"^1O",10,"^1P",["^1Q",["^1R",["^1Q",[["^30","^2?"]]]]],"^23","DEPRECATED: Use :ref (fn [dom-or-nil]) callback instead. See rum issue #124\n  Given state and ref handle, returns React component."],"^15","~$rum.core/ref","^1W",false,"^1K","out/rum/core.cljs","^1O",10,"^1X",["^1Q",[["^30","^2?"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",302,"^1N",302,"^1[",2,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^30","^2?"]]]]],"^23","DEPRECATED: Use :ref (fn [dom-or-nil]) callback instead. See rum issue #124\n  Given state and ref handle, returns React component."],"~$set-ref!",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",597,"^1M",7,"^1N",597,"^1O",15,"^1P",["^1Q",["^1R",["^1Q",[["^13","~$value"]]]]]],"^15","~$rum.core/set-ref!","^1W",false,"^1K","out/rum/core.cljs","^1O",15,"^1X",["^1Q",[["^13","^3Z"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",597,"^1N",597,"^1[",2,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^13","^3Z"]]]]]],"~$static",["^ ","^15","~$rum.core/static","^1K","out/rum/core.cljs","^1L",318,"^1M",1,"^1N",318,"^1O",12,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",318,"^1M",6,"^1N",318,"^1O",12],"^23","Mixin. Will avoid re-render if none of component’s arguments have changed. Does equality check (`=`) on all arguments.\n  \n   ```\n   (rum/defc label < rum/static\n     [text]\n     [:div text])\n     \n   (rum/mount (label \"abc\") js/document.body)\n\n   ;; def != abc, will re-render\n   (rum/mount (label \"def\") js/document.body)\n\n   ;; def == def, won’t re-render\n   (rum/mount (label \"def\") js/document.body)\n   ```","^2F","^2U"],"^1C",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",496,"^1M",7,"^1N",496,"^1O",13,"^1P",["^1Q",["^1R",["^1Q",[["^13","^2?","~$&","~$options"]]]]],"^23","Same as [[cursor-in]] but accepts single key instead of path vector.","^2@",["^ ","^1W",true,"^1[",2,"^1X",[["^1Q",["^13","^2?","^42"]]],"^1P",["^1Q",[["^13","^2?","~$&","^42"]]],"^1Z",["^1Q",[null]]]],"^15","~$rum.core/cursor","^1W",true,"^1K","out/rum/core.cljs","^1O",13,"^2@",["^ ","^1W",true,"^1[",2,"^1X",[["^1Q",["^13","^2?","^42"]]],"^1P",["^1Q",[["^13","^2?","~$&","^42"]]],"^1Z",["^1Q",[null]]],"^1X",[["^1Q",["^13","^2?","^42"]]],"^1Y",null,"^1Z",["^1Q",[null]],"^1M",1,"^1L",496,"^1N",496,"^1[",2,"^20",true,"^1P",["^1Q",[["^13","^2?","~$&","^42"]]],"^23","Same as [[cursor-in]] but accepts single key instead of path vector."],"^30",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",14,"^1M",7,"^1N",14,"^1O",12,"^1P",["^1Q",["^1R",["^1Q",[["~$comp"]]]]],"^23","Given React component, returns Rum state associated with it."],"^15","~$rum.core/state","^1W",false,"^1K","out/rum/core.cljs","^1O",12,"^1X",["^1Q",[["^44"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",14,"^1N",14,"^1[",1,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^44"]]]]],"^23","Given React component, returns Rum state associated with it."],"~$cursor-in",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",469,"^1M",7,"^1N",469,"^1O",16,"^1P",["^1Q",["^1R",["^1Q",[["^13","~$path","~$&",["^ ","~:as","^42"]]]]]],"^23","Given atom with deep nested value and path inside it, creates an atom-like structure\n   that can be used separately from main atom, but will sync changes both ways:\n  \n   ```\n   (def db (atom { :users { \"Ivan\" { :age 30 }}}))\n   \n   (def ivan (rum/cursor db [:users \"Ivan\"]))\n   (deref ivan) ;; => { :age 30 }\n   \n   (swap! ivan update :age inc) ;; => { :age 31 }\n   (deref db) ;; => { :users { \"Ivan\" { :age 31 }}}\n   \n   (swap! db update-in [:users \"Ivan\" :age] inc)\n   ;; => { :users { \"Ivan\" { :age 32 }}}\n   \n   (deref ivan) ;; => { :age 32 }\n   ```\n  \n   Returned value supports `deref`, `swap!`, `reset!`, watches and metadata.\n  \n   The only supported option is `:meta`","^2@",["^ ","^1W",true,"^1[",2,"^1X",[["^1Q",["^13","^47",["^ ","^48","^42"]]]],"^1P",["^1Q",[["^13","^47","~$&",["^ ","^48","^42"]]]],"^1Z",["^1Q",[null]]]],"^15","~$rum.core/cursor-in","^1W",true,"^1K","out/rum/core.cljs","^1O",16,"^2@",["^ ","^1W",true,"^1[",2,"^1X",[["^1Q",["^13","^47",["^ ","^48","^42"]]]],"^1P",["^1Q",[["^13","^47","~$&",["^ ","^48","^42"]]]],"^1Z",["^1Q",[null]]],"^1X",[["^1Q",["^13","^47",["^ ","^48","^42"]]]],"^1Y",null,"^1Z",["^1Q",[null]],"^1M",1,"^1L",469,"^1N",469,"^1[",2,"^20",true,"^1P",["^1Q",[["^13","^47","~$&",["^ ","^48","^42"]]]],"^23","Given atom with deep nested value and path inside it, creates an atom-like structure\n   that can be used separately from main atom, but will sync changes both ways:\n  \n   ```\n   (def db (atom { :users { \"Ivan\" { :age 30 }}}))\n   \n   (def ivan (rum/cursor db [:users \"Ivan\"]))\n   (deref ivan) ;; => { :age 30 }\n   \n   (swap! ivan update :age inc) ;; => { :age 31 }\n   (deref db) ;; => { :users { \"Ivan\" { :age 31 }}}\n   \n   (swap! db update-in [:users \"Ivan\" :age] inc)\n   ;; => { :users { \"Ivan\" { :age 32 }}}\n   \n   (deref ivan) ;; => { :age 32 }\n   ```\n  \n   Returned value supports `deref`, `swap!`, `reset!`, watches and metadata.\n  \n   The only supported option is `:meta`"],"~$use-effect!",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",530,"^1M",7,"^1N",530,"^1O",18,"^1P",["^1Q",["^1R",["^1Q",[["~$setup-fn"],["^4;","^2Q"]]]]],"^23","Takes setup-fn that executes either on the first render or after every update.\n  The function may return cleanup-fn to cleanup the effect, either before unmount or before every next update.\n  Calling behavior is controlled by deps argument.\n\n  (rum/use-effect!\n    (fn []\n      (.addEventListener js/window \"load\" handler)\n      #(.removeEventListener js/window \"load\" handler))\n    []) ;; empty deps collection instructs React to run setup-fn only once on initial render\n        ;; and cleanup-fn only once before unmounting\n\n  Read more at https://reactjs.org/docs/hooks-effect.html","^2@",["^ ","^1W",false,"^1[",2,"^1X",["^1Q",[["^4;"],["^4;","^2Q"]]],"^1P",["^1Q",[["^4;"],["^4;","^2Q"]]],"^1Z",["^1Q",[null,null]]]],"^15","~$rum.core/use-effect!","^1W",false,"^1K","out/rum/core.cljs","^1O",18,"^2@",["^ ","^1W",false,"^1[",2,"^1X",["^1Q",[["^4;"],["^4;","^2Q"]]],"^1P",["^1Q",[["^4;"],["^4;","^2Q"]]],"^1Z",["^1Q",[null,null]]],"^1X",["^1Q",[["^4;"],["^4;","^2Q"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",530,"^1N",530,"^1[",2,"^20",true,"^1P",["^1Q",[["^4;"],["^4;","^2Q"]]],"^23","Takes setup-fn that executes either on the first render or after every update.\n  The function may return cleanup-fn to cleanup the effect, either before unmount or before every next update.\n  Calling behavior is controlled by deps argument.\n\n  (rum/use-effect!\n    (fn []\n      (.addEventListener js/window \"load\" handler)\n      #(.removeEventListener js/window \"load\" handler))\n    []) ;; empty deps collection instructs React to run setup-fn only once on initial render\n        ;; and cleanup-fn only once before unmounting\n\n  Read more at https://reactjs.org/docs/hooks-effect.html"],"~$dom-node",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",296,"^1M",7,"^1N",296,"^1O",15,"^1P",["^1Q",["^1R",["^1Q",[["^30"]]]]],"^23","Usage of this function is discouraged. Use :ref callback instead.\n  Given state, returns top-level DOM node of component. Call it during lifecycle callbacks. Can’t be called during render."],"^15","~$rum.core/dom-node","^1W",false,"^1K","out/rum/core.cljs","^1O",15,"^1X",["^1Q",[["^30"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",296,"^1N",296,"^1[",1,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^30"]]]]],"^23","Usage of this function is discouraged. Use :ref callback instead.\n  Given state, returns top-level DOM node of component. Call it during lifecycle callbacks. Can’t be called during render."],"~$batch",["^ ","^15","~$rum.core/batch","^1K","out/rum/core.cljs","^1L",217,"^1M",1,"^1N",217,"^1O",21,"^2L",true,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",217,"^1M",16,"^1N",217,"^1O",21,"^2L",true],"^2F",["^12",["^3<","^3=","~$clj-nil"]]],"~$with-ref",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",283,"^1M",7,"^1N",283,"^1O",15,"^1P",["^1Q",["^1R",["^1Q",[["^26","^13"]]]]],"^23","Adds React ref (string or callback) to element.\n   \n   ```\n   (rum/defc label [text] [:div text])\n\n   (-> (label)\n       (rum/with-ref \"abc\")\n       (rum/mount js/document.body))\n   ```"],"^15","~$rum.core/with-ref","^1W",false,"^1K","out/rum/core.cljs","^1O",15,"^1X",["^1Q",[["^26","^13"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",283,"^1N",283,"^1[",2,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^26","^13"]]]]],"^23","Adds React ref (string or callback) to element.\n   \n   ```\n   (rum/defc label [text] [:div text])\n\n   (-> (label)\n       (rum/with-ref \"abc\")\n       (rum/mount js/document.body))\n   ```"],"~$build-defc",["^ ","^3R",true,"^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",174,"^1M",16,"^1N",174,"^1O",26,"^3R",true,"^1P",["^1Q",["^1R",["^1Q",[["^3S","^3@","^3A"]]]]]],"^15","~$rum.core/build-defc","^1W",false,"^1K","out/rum/core.cljs","^1O",26,"^1X",["^1Q",[["^3S","^3@","^3A"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",174,"^1N",174,"^1[",3,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^3S","^3@","^3A"]]]]]],"~$render-html",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",605,"^1M",7,"^1N",605,"^1O",18,"^1P",["^1Q",["^1R",["^1Q",[["^26"],["^26","~$opts"]]]]],"^23","Main server-side rendering method. Given component, returns HTML string with static markup of that component.\n  Serve that string to the browser and [[hydrate]] same Rum component over it. React will be able to reuse already existing DOM and will initialize much faster.\n  No opts are supported at the moment.","^2@",["^ ","^1W",false,"^1[",2,"^1X",["^1Q",[["^26"],["^26","^4G"]]],"^1P",["^1Q",[["^26"],["^26","^4G"]]],"^1Z",["^1Q",[null,null]]]],"^15","~$rum.core/render-html","^1W",false,"^1K","out/rum/core.cljs","^1O",18,"^2@",["^ ","^1W",false,"^1[",2,"^1X",["^1Q",[["^26"],["^26","^4G"]]],"^1P",["^1Q",[["^26"],["^26","^4G"]]],"^1Z",["^1Q",[null,null]]],"^1X",["^1Q",[["^26"],["^26","^4G"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",605,"^1N",605,"^1[",2,"^20",true,"^1P",["^1Q",[["^26"],["^26","^4G"]]],"^23","Main server-side rendering method. Given component, returns HTML string with static markup of that component.\n  Serve that string to the browser and [[hydrate]] same Rum component over it. React will be able to reuse already existing DOM and will initialize much faster.\n  No opts are supported at the moment."],"^<",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",253,"^1M",7,"^1N",253,"^1O",14,"^1P",["^1Q",["^1R",["^1Q",[["^26","^27"]]]]],"^23","Same as [[mount]] but must be called on DOM tree already rendered by a server via [[render-html]]."],"^15","~$rum.core/hydrate","^1W",false,"^1K","out/rum/core.cljs","^1O",14,"^1X",["^1Q",[["^26","^27"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",253,"^1N",253,"^1[",2,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^26","^27"]]]]],"^23","Same as [[mount]] but must be called on DOM tree already rendered by a server via [[render-html]]."],"~$build-defcc",["^ ","^3R",true,"^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",201,"^1M",16,"^1N",201,"^1O",27,"^3R",true,"^1P",["^1Q",["^1R",["^1Q",[["^3S","^3@","^3A"]]]]]],"^15","~$rum.core/build-defcc","^1W",false,"^1K","out/rum/core.cljs","^1O",27,"^1X",["^1Q",[["^3S","^3@","^3A"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",201,"^1N",201,"^1[",3,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^3S","^3@","^3A"]]]]]],"^1D",["^ ","^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",463,"^1M",3,"^1N",463,"^1O",15,"~:style/indent",2,"^1P",["^1Q",["^1R",["^1Q",[["~$refs","^2?","~$f"],["^4M","^2?","~$f","^4G"]]]]],"^23","Use this to create “chains” and acyclic graphs of dependent atoms.\n   \n             [[derived-atom]] will:\n          \n             - Take N “source” refs.\n             - Set up a watch on each of them.\n             - Create “sink” atom.\n             - When any of source refs changes:\n                - re-run function `f`, passing N dereferenced values of source refs.\n                - `reset!` result of `f` to the sink atom.\n             - Return sink atom.\n\n             Example:\n\n             ```\n             (def *a (atom 0))\n             (def *b (atom 1))\n             (def *x (derived-atom [*a *b] ::key\n                       (fn [a b]\n                         (str a \":\" b))))\n             \n             (type *x)  ;; => clojure.lang.Atom\n             (deref *x) ;; => \"0:1\"\n             \n             (swap! *a inc)\n             (deref *x) ;; => \"1:1\"\n             \n             (reset! *b 7)\n             (deref *x) ;; => \"1:7\"\n             ```\n\n             Arguments:\n          \n             - `refs` - sequence of source refs,\n             - `key`  - unique key to register watcher, same as in `clojure.core/add-watch`,\n             - `f`    - function that must accept N arguments (same as number of source refs) and return a value to be written to the sink ref. Note: `f` will be called with already dereferenced values,\n             - `opts` - optional. Map of:\n               - `:ref` - use this as sink ref. By default creates new atom,\n               - `:check-equals?` - Defaults to `true`. If equality check should be run on each source update: `(= @sink (f new-vals))`. When result of recalculating `f` equals to the old value, `reset!` won’t be called. Set to `false` if checking for equality can be expensive."],"^15","~$rum.core/derived-atom","^1K","out/rum/core.cljs","^1O",15,"^1M",1,"^1L",422,"^4L",2,"^1N",463,"^1P",["^1Q",["^1R",["^1Q",[["^4M","^2?","~$f"],["^4M","^2?","~$f","^4G"]]]]],"^23","Use this to create “chains” and acyclic graphs of dependent atoms.\n   \n             [[derived-atom]] will:\n          \n             - Take N “source” refs.\n             - Set up a watch on each of them.\n             - Create “sink” atom.\n             - When any of source refs changes:\n                - re-run function `f`, passing N dereferenced values of source refs.\n                - `reset!` result of `f` to the sink atom.\n             - Return sink atom.\n\n             Example:\n\n             ```\n             (def *a (atom 0))\n             (def *b (atom 1))\n             (def *x (derived-atom [*a *b] ::key\n                       (fn [a b]\n                         (str a \":\" b))))\n             \n             (type *x)  ;; => clojure.lang.Atom\n             (deref *x) ;; => \"0:1\"\n             \n             (swap! *a inc)\n             (deref *x) ;; => \"1:1\"\n             \n             (reset! *b 7)\n             (deref *x) ;; => \"1:7\"\n             ```\n\n             Arguments:\n          \n             - `refs` - sequence of source refs,\n             - `key`  - unique key to register watcher, same as in `clojure.core/add-watch`,\n             - `f`    - function that must accept N arguments (same as number of source refs) and return a value to be written to the sink ref. Note: `f` will be called with already dereferenced values,\n             - `opts` - optional. Map of:\n               - `:ref` - use this as sink ref. By default creates new atom,\n               - `:check-equals?` - Defaults to `true`. If equality check should be run on each source update: `(= @sink (f new-vals))`. When result of recalculating `f` equals to the old value, `reset!` won’t be called. Set to `false` if checking for equality can be expensive."],"^:",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",230,"^1M",8,"^1N",230,"^1O",14,"^2L",true,"^1P",["^1Q",["^1R",["^1Q",[[]]]]]],"^2L",true,"^15","~$rum.core/render","^1W",false,"^1K","out/rum/core.cljs","^1O",14,"^1X",["^1Q",[[]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",230,"^1N",230,"^1[",0,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[[]]]]]],"~$empty-queue",["^ ","^15","~$rum.core/empty-queue","^1K","out/rum/core.cljs","^1L",222,"^1M",1,"^1N",222,"^1O",27,"^2L",true,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",222,"^1M",16,"^1N",222,"^1O",27,"^2L",true],"^2F","~$cljs.core/IVector"],"~$use-state",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",503,"^1M",14,"^1N",503,"^1O",23,"^2F","^2G","^1P",["^1Q",["^1R",["^1Q",[["~$value-or-fn"]]]]],"^23","Takes initial value or value returning fn and returns a tuple of [value set-value!],\n  where `value` is current state value and `set-value!` is a function that schedules re-render.\n\n  (let [[value set-state!] (rum/use-state 0)]\n    [:button {:on-click #(set-state! (inc value))}\n      value])"],"^15","~$rum.core/use-state","^1W",false,"^1K","out/rum/core.cljs","^1O",23,"^1X",["^1Q",[["^4T"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",503,"^2J","^2G","^1N",503,"^1[",1,"^2F","^2G","^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^4T"]]]]],"^23","Takes initial value or value returning fn and returns a tuple of [value set-value!],\n  where `value` is current state value and `set-value!` is a function that schedules re-render.\n\n  (let [[value set-state!] (rum/use-state 0)]\n    [:button {:on-click #(set-state! (inc value))}\n      value])"],"~$build-class",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",24,"^1M",8,"^1N",24,"^1O",19,"^2L",true,"^1P",["^1Q",["^1R",["^1Q",[["^:","^3@","^3A"]]]]]],"^2L",true,"^15","~$rum.core/build-class","^1W",false,"^1K","out/rum/core.cljs","^1O",19,"^1X",["^1Q",[["^:","^3@","^3A"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",24,"^1N",24,"^1[",3,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^:","^3@","^3A"]]]]]],"~$use-callback",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",549,"^1M",7,"^1N",549,"^1O",19,"^1P",["^1Q",["^1R",["^1Q",[["~$callback"],["^4Y","^2Q"]]]]],"^23","Takes callback function and returns memoized variant, memoization is done based on provided deps collection.\n\n  (rum/defc button < rum/static\n    [{:keys [on-click]} text]\n    [:button {:on-click on-click}\n      text])\n\n  (rum/defc app [v]\n    (let [on-click (rum/use-callback #(do-stuff v) [v])]\n      ;; because on-click callback is memoized here based on v argument\n      ;; the callback won't be re-created on every render, unless v changes\n      ;; which means that underlying `button` component won't re-render wastefully\n      [button {:on-click on-click}\n        \"press me\"]))\n\n  Read more at https://reactjs.org/docs/hooks-reference.html#usecallback","^2@",["^ ","^1W",false,"^1[",2,"^1X",["^1Q",[["^4Y"],["^4Y","^2Q"]]],"^1P",["^1Q",[["^4Y"],["^4Y","^2Q"]]],"^1Z",["^1Q",[null,null]]]],"^15","~$rum.core/use-callback","^1W",false,"^1K","out/rum/core.cljs","^1O",19,"^2@",["^ ","^1W",false,"^1[",2,"^1X",["^1Q",[["^4Y"],["^4Y","^2Q"]]],"^1P",["^1Q",[["^4Y"],["^4Y","^2Q"]]],"^1Z",["^1Q",[null,null]]],"^1X",["^1Q",[["^4Y"],["^4Y","^2Q"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",549,"^1N",549,"^1[",2,"^20",true,"^1P",["^1Q",[["^4Y"],["^4Y","^2Q"]]],"^23","Takes callback function and returns memoized variant, memoization is done based on provided deps collection.\n\n  (rum/defc button < rum/static\n    [{:keys [on-click]} text]\n    [:button {:on-click on-click}\n      text])\n\n  (rum/defc app [v]\n    (let [on-click (rum/use-callback #(do-stuff v) [v])]\n      ;; because on-click callback is memoized here based on v argument\n      ;; the callback won't be re-created on every render, unless v changes\n      ;; which means that underlying `button` component won't re-render wastefully\n      [button {:on-click on-click}\n        \"press me\"]))\n\n  Read more at https://reactjs.org/docs/hooks-reference.html#usecallback"],"^14",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",592,"^1M",7,"^1N",592,"^1O",12,"^1P",["^1Q",["^1R",["^1Q",[["^13"]]]]],"^23","Takes a ref returned from use-ref and returns its current value."],"^15","~$rum.core/deref","^1W",false,"^1K","out/rum/core.cljs","^1O",12,"^1X",["^1Q",[["^13"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",592,"^1N",592,"^1[",1,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^13"]]]]],"^23","Takes a ref returned from use-ref and returns its current value."],"~$build-ctor",["^ ","^1I",null,"^1J",["^ ","^1K","/home/hazard/Documents/code/happy-trails/out/rum/core.cljs","^1L",150,"^1M",8,"^1N",150,"^1O",18,"^2L",true,"^1P",["^1Q",["^1R",["^1Q",[["^:","^3@","^3A"]]]]]],"^2L",true,"^15","~$rum.core/build-ctor","^1W",false,"^1K","out/rum/core.cljs","^1O",18,"^1X",["^1Q",[["^:","^3@","^3A"]]],"^1Y",null,"^1Z",["^1Q",[null,null]],"^1M",1,"^1L",150,"^1N",150,"^1[",3,"^20",true,"^1P",["^1Q",["^1R",["^1Q",[["^:","^3@","^3A"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^16","^16","^1@","^1@"],"~:cljs.analyzer/constants",["^ ","~:seen",["^12",["~:rum/react-component","~:did-mount","~:will-unmount","^1J","~:did-remount","~:rum/class","~:init","~:else","~:did-catch","~:child-context","~:rum.reactive/key","~:rum/args","~:before-render","~:did-update","~:key-fn","~:will-mount","~:rum/component-stack","~:will-update","~:class-properties","~:rum/local","~:after-render","~:static-properties","~:wrap-render","~:rum.reactive/refs","~:should-update"]],"~:order",["^5;","^5D","^5A","^5K","^57","^5I","^59","^5M","^5F","^5B","^5=","^58","^5>","^5G","^5J","^56","^5E","^5C","^5@","^5:","^5<","^5H","^5?","^5L","^1J"]],"^23",null]